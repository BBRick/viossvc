//
//  EmojiFaceHelper.swift
//  viossvc
//
//  Created by abx’s mac on 2016/12/6.
//  Copyright © 2016年 com.yundian. All rights reserved.
//

import UIKit

class EmojiFaceHelper: NSObject {
    static let shared  = EmojiFaceHelper()
    
    private var m_faceArray  = [String]()
    func getFaceArray() -> [String] {
        return m_faceArray
    }
    
    
    override init() {
       super.init()
        initFace()

    }
//    
//    func replaceFace(string: String) -> String {
//        return ""
//    }
//    func faceReplaceHex(string : String) -> String {
//        return ""
//    }
    func EMOJI_CODE_TO_SYMBOL(x : Int) -> uint {
        let sym = (((0x808080F0 | (x & 0x3F000) >> 4) | (x & 0xFC0) << 10) | (x & 0x1C0000) << 18) | (x & 0x3F) << 24
        return   uint(sym)
    }
    
    func MULITTHREEBYTEUTF16TOUNICODE(x : Int , y : Int) -> Int {
        return (((((x ^ 0xD800) << 2) | ((y ^ 0xDC00) >> 8)) << 8) | ((y ^ 0xDC00) & 0xFF)) + 0x10000
    }
    

 private   func xStringReplaceEmoji(array: [Int]) -> NSString {
        
        
        let bytes = array
        let data = NSData(bytes: bytes, length: bytes.count)
        let dogString = NSString.init(data: data, encoding: NSUTF8StringEncoding)
        return dogString == nil ? "" : dogString!
    }
    
 private   func emojiStringArray(array: [[Int]]) -> [String] {
        
        var  emojiArray = [String]()
        for bytes in array {
            emojiArray.append(xStringReplaceEmoji(bytes) as String)
        }
        return emojiArray
    }

 private   func initFace() {
        
//        let array1 = [[0xF0,0x9F,0x98,0x84], [0xF0,0x9F,0x98,0x9C], [0xF0,0x9F,0x98,0x9E], [0xF0,0x9F,0x98,0xB0], [0xF0,0x9F,0x98,0xB0], [0xF0,0x9F,0x98,0x9D], [0xF0,0x9F,0x98,0xA3]]
//        
//
//        let  array2 = [[0xF0,0x9F,0x98,0x93], [0xF0,0x9F,0x98,0x8A], [0xF0,0x9F,0x98,0xB3], [0xF0,0x9F,0x98,0xA2], [0xF0,0x9F,0x98,0xA8], [0xF0,0x9F,0x98,0x89], [0xF0,0x9F,0x98,0x81]]
//        let  array3 = [[0xF0,0x9F,0x98,0x82], [0xF0,0x9F,0x98,0xB1], [0xF0,0x9F,0x98,0x8D], [0xF0,0x9F,0x98,0x94], [0xF0,0x9F,0x98,0xAD], [0xF0,0x9F,0x98,0xA0], [0xF0,0x9F,0x98,0x98]]
//        let  array4 = [[0xF0,0x9F,0x98,0x8C], [0xF0,0x9F,0x98,0xAA], [0xF0,0x9F,0x98,0xA1], [0xF0,0x9F,0x98,0x9A], [0xF0,0x9F,0x98,0x92], [0xF0,0x9F,0x98,0xA5], []]
//        let  array5 = [[0xF0,0x9F,0x98,0x96], [0xF0,0x9F,0x91,0xA8], [0xF0,0x9F,0x91,0x8A], [0xF0,0x9F,0x99,0x8F], [0xF0,0x9F,0x98,0xB7], [0xF0,0x9F,0x91,0xA9], [0xE2,0x9C,0x8A]]
//        let  array6 = [[0xF0,0x9F,0x91,0x8F], [0xF0,0x9F,0x98,0xB2], [0xF0,0x9F,0x8C,0x9F], [0xE2,0x9C,0x8C], [0xF0,0x9F,0x92,0xAA], [0xF0,0x9F,0x91,0xBF], [0xF0,0x9F,0x91,0x84]]
//        let  array7 = [[0xF0,0x9F,0x91,0x86], [0xF0,0x9F,0x91,0x97], [0xF0,0x9F,0x98,0x8F], [0xF0,0x9F,0x91,0x8D], [0xF0,0x9F,0x91,0x87], [0xF0,0x9F,0x8E,0x80], [0xF0,0x9F,0x91,0xA6]]
//        let  array8 = [[0xF0,0x9F,0x91,0x8E], [0xF0,0x9F,0x91,0x89], [0xE2,0x9D,0xA4], [0xF0,0x9F,0x91,0xA7], [0xF0,0x9F,0x91,0x8C], [0xF0,0x9F,0x91,0x8C], []]
//        let  array9 = [[0xF0,0x9F,0x92,0x94], [0xF0,0x9F,0x8D,0x83], [0xF0,0x9F,0x8E,0x85], [0xF0,0x9F,0x8D,0xBA], [0xF0,0x9F,0x92,0x8E], [0xF0,0x9F,0x8C,0x99], [0xF0,0x9F,0x8E,0x81]]
//        let array10  = [[0xF0,0x9F,0x8E,0x82], [0xF0,0x9F,0x90,0xB6], [0xE2,0x98,0x80], [0xF0,0x9F,0x93,0xB1], [0xF0,0x9F,0x8F,0xA0], [0xF0,0x9F,0x90,0xB1], [0xE2,0x98,0x81]]
//        let array11 = [[0xF0,0x9F,0x94,0x8D], [0xF0,0x9F,0x9A,0x97], [0xF0,0x9F,0x8C,0xB9], [0xE2,0x9A,0xA1], [0xF0,0x9F,0x92,0xA3], [0xF0,0x9F,0x95,0x99], [0xF0,0x9F,0x8C,0xBB]]
//        let array12 = [[0xE2,0x98,0x94], [0xE2,0x9A,0xBD], [0xE2,0x9C,0x8C], [0xF0,0x9F,0x8D,0x81], [0xF0,0x9F,0x91,0xBB], [0xE2,0x98,0x95], []]
//        
//        
//        
//        var array = [[Int]]()
//        array.appendContentsOf(array1)
//        array.appendContentsOf(array2)
//        array.appendContentsOf(array3)
//        array.appendContentsOf(array4)
//        array.appendContentsOf(array5)
//        array.appendContentsOf(array6)
//        array.appendContentsOf(array7)
//        array.appendContentsOf(array8)
//        array.appendContentsOf(array9)
//        array.appendContentsOf(array10)
//        array.appendContentsOf(array11)
//        array.appendContentsOf(array12)
//        
//        m_faceArray = emojiStringArray(array)
    
        
        for i  in 0x1F600...0x1F64F {
            if i < 0x1F641 || i > 0x1F644 {
                var sym = EMOJI_CODE_TO_SYMBOL(i)
                
                 let emojiT = NSString.init(bytes: &sym , length: sizeofValue(sym), encoding: NSUTF8StringEncoding)
                
                m_faceArray.append(emojiT as! String)
            }
        }
    
    for i  in 1...m_faceArray.count / 28 {
        m_faceArray[(28 * i) - 1] = ""
        
    }
    
    }
//   
//    func multibyteFaceToFaceUnicode(strFace : String) -> String {
//        var  curChar : unichar = 0x00
//        var  nextChar : unichar = 0x00
//        var faceUnicode = NSString()
//        let nsStrFace = strFace as NSString
//        for (var  i = 0 ; i < nsStrFace.length; ) {
//            curChar = nsStrFace.characterAtIndex(i)
//            nextChar = nsStrFace.length > i + 1 ? nsStrFace.characterAtIndex(i + 1): 0x00
//            if( curChar == 0x0200d )//特殊多表情组合符号
//            {
//                faceUnicode = faceUnicode.stringByAppendingFormat("[0x%05x]",curChar)
//                i += 1
//            }
//            else
//            {
//                let code = MULITTHREEBYTEUTF16TOUNICODE(Int(curChar), y:Int(nextChar))
//                if code >= 0xFFFFF//4字节组成的表情
//                {
//                    if nextChar != 0x00 && nextChar != 0xfe0f {
//                        faceUnicode = faceUnicode.stringByAppendingFormat("[0x%05x][0x%05x]",curChar,nextChar)
//                    }
//                    else {
//                      faceUnicode = faceUnicode.stringByAppendingFormat("[0x%05x]",curChar);
//                    }
//                    
//                }
//                else
//                {
//                    faceUnicode = faceUnicode.stringByAppendingFormat("[0x%05x]",Int(code));
//                }
//                i += 2;
//            }
//
//            
//            
//        }
//        
//
//        return faceUnicode as String
//    }
//
//    
//    
//    
}


